#include <iostream>
#include <list>
#include <array>
#include <vector>
#include <ctime>

void AddNumber(std::list<int>& task1) {
    int sum = 0;
    int it = 0;
    for (auto elem : task1) {
        sum += elem;
        ++it;
    }
    sum = sum / it;
    std::cout << sum << std::endl;
    task1.push_back(sum);
}

class Matrix {
private:
    int rows = 0;
    int cols = 0;
    int matrix[3][3];
public:
    Matrix(int rows, int cols) {
        this->rows = rows;
        this->cols = cols;
    };

    void Determinant() {
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                matrix[i][j] = rand() % 5 + 1;
            }
        }
        int det = matrix[0][0] * matrix[1][1] * matrix[2][2] + matrix[2][0] * matrix[0][1] * matrix[1][2]
            + matrix[1][0] * matrix[2][1] * matrix[0][2] + matrix[1][0] * matrix[2][1] * matrix[0][2]
            - matrix[2][0] * matrix[1][1] * matrix[0][2] - matrix[1][0] * matrix[0][1] * matrix[2][2]
            - matrix[0][0] * matrix[1][2] * matrix[2][1];
        std::cout << det;
    };
};
template <typename T>
class Iterator {
private:
    T iterator;
public:
    Iterator(T iterator) {
        this->iterator = iterator;
    }
    bool operator!= (const Iterator& it_end) {
        return iterator != it_end.iterator;
    }
    bool operator== (const Iterator& it_end) {
        return iterator == it_end.iterator;
    }
    Iterator operator++ () {
        
        return ++iterator;
    }
    Iterator operator-- () {
        return --iterator;
    }
    T operator* () {
        return iterator;
    }
};
template <typename T>
class ItTest{
private:
    T b;
    T s;
public:
   ItTest(const std::vector<T> v) {
       b = v[0];
       s = v[0] + v.size();
   }
   Iterator<T> begin() const {
       return Iterator<T> (b);
   }
   Iterator<T> end() const {
       return Iterator<T> (s);
   }
};

int main() {
    srand(time(NULL));
    //Task 1
    std::list<int> task1{ 1,2,3,4,5 };
    AddNumber(task1);
    for (auto elem : task1) {
        std::cout << elem;
    }std::cout << std::endl;
    //Task 2
    Matrix m(3, 3);
    m.Determinant();
    std::cout << std::endl;
    //Task 3
    std::vector<int> task3{1,2,3,4,5,6};
    for (auto a : ItTest<int> {task3}){
        std::cout<< a << " ";
    }
    return 0;
}
